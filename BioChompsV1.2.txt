<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BioChomps - Mad Science Terminal</title>
    <style>
        @font-face {
            font-family: 'VT323';
            src: url('https://fonts.googleapis.com/css2?family=VT323&display=swap');
            font-style: normal;
            font-weight: 400;
        }
        
        body, html {
            margin: 0;
            padding: 0;
            height: 100%;
            overflow: hidden;
            background-color: #000;
            font-family: 'VT323', 'Courier New', monospace;
            color: #33ff33;
            line-height: 1.4;
            cursor: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="12" height="16" viewBox="0 0 12 16"><rect x="0" y="0" width="8" height="16" fill="%2333ff33"/></svg>') 0 0, auto;
        }
        
        .terminal-container {
            position: relative;
            width: 100%;
            height: 100%;
            overflow: hidden;
            padding: 20px;
            box-sizing: border-box;
        }
        
        /* Fixed scanlines - vertical, top to bottom */
        .scanlines {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(
                to bottom,
                rgba(51, 255, 51, 0.03) 50%,
                rgba(0, 0, 0, 0.1) 50%
            );
            background-size: 100% 4px;
            pointer-events: none;
            z-index: 10;
        }
        
        /* Fixed horizontal scan effect - moves from top to bottom */
        .horizontal-scanline {
            position: absolute;
            top: -5%;
            left: 0;
            width: 100%;
            height: 2px;
            background-color: rgba(51, 255, 51, 0.3);
            opacity: 0.7;
            box-shadow: 0 0 5px rgba(51, 255, 51, 0.5);
            z-index: 11;
            animation: horizontalScan 4s linear infinite;
            pointer-events: none;
        }
        
        .crt-effect {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: radial-gradient(ellipse at center, transparent 0%, rgba(0, 0, 0, 0.2) 80%, rgba(0, 0, 0, 0.4) 100%);
            pointer-events: none;
            z-index: 12;
        }
        
        .terminal-content {
            height: calc(100% - 40px);
            overflow-y: auto;
            padding-right: 10px;
            position: relative;
            z-index: 2;
            scrollbar-width: thin;
            scrollbar-color: #33ff33 #000;
        }
        
        .terminal-content::-webkit-scrollbar {
            width: 8px;
        }
        
        .terminal-content::-webkit-scrollbar-track {
            background: #000; 
        }
        
        .terminal-content::-webkit-scrollbar-thumb {
            background: #33ff33; 
        }
        
        .input-line {
            display: flex;
            margin-top: 20px;
        }
        
        .prompt {
            color: #33ff33;
            font-weight: bold;
            margin-right: 8px;
        }
        
        .user-input {
            flex-grow: 1;
            background: transparent;
            border: none;
            color: #33ff33;
            font-family: 'VT323', 'Courier New', monospace;
            font-size: 1em;
            caret-color: #33ff33;
            outline: none;
        }
        
        .game-header {
            text-align: center;
            margin-bottom: 20px;
            font-weight: bold;
        }
        
        .ascii-art {
            white-space: pre;
            line-height: 1.2;
            text-align: center;
            margin: 20px 0;
        }
        
        .status-bar {
            position: fixed;
            bottom: 0;
            left: 0;
            width: 100%;
            background-color: #000;
            border-top: 1px solid #33ff33;
            padding: 5px 20px;
            display: flex;
            justify-content: space-between;
            font-size: 0.9em;
            z-index: 5;
        }
        
        .game-phase {
            display: none;
        }
        
        .game-phase.active {
            display: block;
        }
        
        .button {
            background-color: #000;
            color: #33ff33;
            border: 1px solid #33ff33;
            padding: 5px 10px;
            margin: 5px;
            cursor: pointer;
            font-family: 'VT323', 'Courier New', monospace;
        }
        
        .button:hover {
            background-color: #33ff33;
            color: #000;
        }
        
        .flicker {
            animation: textFlicker 5s infinite;
        }
        
        .gameitem {
            border: 1px solid #33ff33;
            padding: 10px;
            margin: 10px 0;
        }
        
        .part-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 10px;
        }
        
        @keyframes textFlicker {
            0% { opacity: 1; }
            92% { opacity: 1; }
            93% { opacity: 0.3; }
            94% { opacity: 1; }
            97% { opacity: 0.5; }
            98% { opacity: 1; }
            100% { opacity: 1; }
        }
        
        /* Fixed animation for the horizontal scanline */
        @keyframes horizontalScan {
            0% { top: -5%; }
            80% { top: 105%; }
            100% { top: 105%; }
        }
        
        /* Screen startup animation */
        .terminal-container::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: #000;
            z-index: 100;
            animation: startup 2s ease-out forwards;
        }
        
        @keyframes startup {
            0% { height: 100%; }
            90% { height: 5px; }
            100% { height: 0; }
        }
        
        /* Different screen phases styling */
        .science-phase .terminal-content {
            background: linear-gradient(rgba(0, 20, 0, 0.2), rgba(0, 15, 0, 0.1));
        }
        
        .download-phase .terminal-content {
            background: linear-gradient(rgba(0, 20, 20, 0.2), rgba(0, 15, 0, 0.1));
        }
        
        .mission-phase .terminal-content {
            background: linear-gradient(rgba(20, 20, 0, 0.2), rgba(0, 15, 0, 0.1));
        }
        
        .battle-mode .terminal-content {
            background: linear-gradient(rgba(20, 0, 0, 0.2), rgba(0, 15, 0, 0.1));
        }
        
        /* Battle styling */
        .battle-arena {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }
        
        .battle-creatures {
            display: flex;
            justify-content: space-between;
            margin: 20px 0;
        }
        
        .battle-creature {
            text-align: center;
            width: 45%;
        }
        
        .health-bar {
            height: 20px;
            border: 1px solid #33ff33;
            margin: 10px 0;
            position: relative;
        }
        
        .health-bar-fill {
            height: 100%;
            background-color: #33ff33;
            transition: width 0.5s ease-in-out;
        }
        
        .battle-log {
            border: 1px solid #33ff33;
            padding: 10px;
            height: 150px;
            overflow-y: auto;
            margin-bottom: 10px;
        }
        
        .ability-buttons {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }
        
        /* Lab-Crawl styling */
        .lab-crawl-narrative {
            border: 1px solid #33ff33;
            padding: 15px;
            margin-bottom: 20px;
        }
        
        .lab-crawl-choices {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        
        /* Part styling */
        .part-item {
            border: 1px solid #33ff33;
            padding: 10px;
            display: flex;
            flex-direction: column;
        }
        
        .part-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 5px;
        }
        
        .part-stats {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 5px;
        }
        
        .part-actions {
            margin-top: 10px;
            display: flex;
            justify-content: flex-end;
        }
        
        /* Rarity colors */
        .rarity-BASIC {
            color: #33ff33;
        }
        
        .rarity-ADVANCED {
            color: #3399ff;
        }
        
        .rarity-ELITE {
            color: #ff33ff;
        }
        
        /* Subscription banner */
        .subscription-banner {
            border: 1px solid #ff33ff;
            background-color: rgba(255, 51, 255, 0.1);
            padding: 10px;
            margin: 10px 0;
            text-align: center;
        }
        
        /* GPT Integration Styles */
        #chat-container {
            display: none;
            height: 100%;
            border: 1px solid #33ff33;
            overflow: hidden;
            margin-top: 20px;
        }
        
        #chat-messages {
            height: calc(100% - 60px);
            overflow-y: auto;
            padding: 10px;
            border-bottom: 1px solid #33ff33;
        }
        
        .message {
            margin-bottom: 15px;
            padding: 8px;
            border-radius: 3px;
            animation: messageAppear 0.3s ease-in;
        }
        
        @keyframes messageAppear {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .user-message {
            border-left: 3px solid #33ff33;
            background-color: rgba(51, 255, 51, 0.1);
        }
        
        .bot-message {
            border-left: 3px solid #ff33ff;
            background-color: rgba(255, 51, 255, 0.1);
        }
        
        #chat-input-container {
            display: flex;
            padding: 10px;
            background-color: rgba(0, 0, 0, 0.3);
        }
        
        #chat-input {
            flex-grow: 1;
            background-color: rgba(0, 0, 0, 0.5);
            border: 1px solid #33ff33;
            color: #33ff33;
            padding: 8px;
            font-family: 'VT323', 'Courier New', monospace;
        }
        
        #send-button {
            background-color: #000;
            color: #33ff33;
            border: 1px solid #33ff33;
            padding: 8px 15px;
            margin-left: 10px;
            cursor: pointer;
            font-family: 'VT323', 'Courier New', monospace;
        }
        
        #send-button:hover {
            background-color: #33ff33;
            color: #000;
        }
        
        /* Hidden iframe for the GPT */
        #gpt-frame {
            display: none;
            width: 1px;
            height: 1px;
            opacity: 0;
            position: absolute;
        }
        
        /* Loading indicator */
        .typing-indicator {
            display: none;
            color: #33ff33;
            font-style: italic;
            margin-bottom: 10px;
            animation: blink 1s infinite;
        }
        
        @keyframes blink {
            0% { opacity: 0.5; }
            50% { opacity: 1; }
            100% { opacity: 0.5; }
        }
        
        /* Game phase for chat interaction */
        #chat-phase {
            height: 100%;
        }
        
        /* System message styling */
        .system-message {
            color: #ffcc00;
            text-align: center;
            margin: 10px 0;
            font-style: italic;
        }
        
        /* "Thinking" animation */
        .thinking {
            display: inline-block;
            overflow: hidden;
            animation: ellipsis 1.5s infinite;
        }
        
        @keyframes ellipsis {
            0% { width: 0; }
            33% { width: 1em; }
            66% { width: 2em; }
            100% { width: 3em; }
        }
    </style>
</head>
<body>
    <div class="terminal-container">
        <div class="scanlines"></div>
        <div class="horizontal-scanline"></div>
        <div class="crt-effect"></div>
        
        <div class="terminal-content">
            <div class="game-header flicker">
	<div class="ascii-art">
                    ██████╗ ██╗ ██████╗  ██████╗██╗  ██╗ ██████╗ ███╗   ███╗██████╗ ███████╗
                    ██╔══██╗██║██╔═══██╗██╔════╝██║  ██║██╔═══██╗████╗ ████║██╔══██╗██╔════╝
                    ██████╔╝██║██║   ██║██║     ███████║██║   ██║██╔████╔██║██████╔╝███████╗
                    ██╔══██╗██║██║   ██║██║     ██╔══██║██║   ██║██║╚██╔╝██║██╔═══╝ ╚════██║
                    ██████╔╝██║╚██████╔╝╚██████╗██║  ██║╚██████╔╝██║ ╚═╝ ██║██║     ███████║
                    ╚═════╝ ╚═╝ ╚═════╝  ╚═════╝╚═╝  ╚═╝ ╚═════╝ ╚═╝     ╚═╝╚═╝     ╚══════╝
                </div>
                <p>MAD SCIENCE TERMINAL v3.14159</p>
                <p>SYSTEM BOOTUP... COMPLETE</p>
                <p>WELCOME TO THE LABORATORY, MAD SCIENTIST!</p>
            </div>
            
            <div id="output"></div>
            
            <!-- Start Screen -->
            <div id="start-screen" class="game-phase active">
                <p>INITIALIZING BIOCHOMPS PROTOCOL...</p>
                <p>CREATE YOUR MAD SCIENTIST IDENTITY TO BEGIN:</p>
                <div class="input-line">
                    <span class="prompt">NAME:</span>
                    <input type="text" id="scientist-name" class="user-input" placeholder="Enter your mad scientist name">
                </div>
                <div style="margin-top: 20px; text-align: center;">
                    <button onclick="startGame()" class="button">BEGIN EXPERIMENTATION</button>
                </div>
            </div>
            
            <!-- Chat Phase -->
            <div id="chat-phase" class="game-phase">
                <div id="chat-container">
                    <div id="chat-messages">
                        <div class="system-message">
                            * BioChomps AI System initialized *
                        </div>
                        <div class="bot-message">
                            Greetings, mad scientist! I am the BioChomps AI system, ready to assist with your genetic experimentation and creature battles. What sinister plans shall we execute today?
                        </div>
                        <div class="typing-indicator" id="typing-indicator">
                            BioChomps AI thinking<span class="thinking">...</span>
                        </div>
                    </div>
                    <div id="chat-input-container">
                        <input type="text" id="chat-input" placeholder="Enter your command, professor..." autocomplete="off">
                        <button id="send-button">TRANSMIT</button>
                    </div>
                </div>
            </div>
            
            <!-- Status Bar -->
            <div class="status-bar">
                <div id="user-info">USER: [UNDEFINED]</div>
                <div id="system-info">SYSTEM: ONLINE | CONNECTION: SECURE</div>
            </div>
        </div>
    </div>
    
    <!-- Hidden iframe for GPT interaction -->
    <iframe id="gpt-frame" src="about:blank" title="GPT Interface"></iframe>
    
    <script>
        // Variables to manage the chat interface
        let scientistName = "";
        let conversationHistory = [];
        let gptFrame = null;
        let messageQueue = [];
        let processingMessage = false;
        
        // Function to handle game start
        function startGame() {
            scientistName = document.getElementById("scientist-name").value.trim();
            if (!scientistName) {
                scientistName = "Dr. Unknown";
            }
            
            // Update UI with scientist name
            document.getElementById("user-info").textContent = `USER: DR. ${scientistName.toUpperCase()}`;
            
            // Hide start screen and show chat interface
            document.getElementById("start-screen").classList.remove("active");
            document.getElementById("chat-phase").classList.add("active");
            document.getElementById("chat-container").style.display = "block";
            
            // Load the GPT iframe
            loadGPTInterface();
            
            // Focus on chat input
            document.getElementById("chat-input").focus();
            
            // Add welcome message specific to scientist name
            addBotMessage(`Welcome, Dr. ${scientistName}! Your laboratory is fully operational. What genetic experiments shall we conduct today?`);
        }
        
        // Function to load the GPT interface in the hidden iframe
        function loadGPTInterface() {
            const gptFrame = document.getElementById("gpt-frame");
            gptFrame.src = "https://chatgpt.com/g/g-67d5d8be96288191a9279ca0606ce1d9-biochomps-v1-1";
            
            // Listen for messages from the iframe
            window.addEventListener("message", receiveMessage);
            
            // Display connection message
            addSystemMessage("Establishing neural link to BioChomps AI mainframe...");
            
            // Simulate connection delay
            setTimeout(() => {
                addSystemMessage("Neural link established. BioChomps AI ready for interaction.");
            }, 2000);
        }
        
        // Function to handle receiving messages from the GPT iframe
        function receiveMessage(event) {
            // This is a placeholder for the actual message handling
            // In a real implementation, we would process messages from the GPT iframe here
            // This is challenging because the ChatGPT iframe doesn't expose a standard API
            // For now, we'll simulate responses
        }
        
        // Function to add a system message to the chat
        function addSystemMessage(text) {
            const chatMessages = document.getElementById("chat-messages");
            const messageDiv = document.createElement("div");
            messageDiv.classList.add("system-message");
            messageDiv.textContent = `* ${text} *`;
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
        
        // Function to add a user message to the chat
        function addUserMessage(text) {
            const chatMessages = document.getElementById("chat-messages");
            const messageDiv = document.createElement("div");
            messageDiv.classList.add("message", "user-message");
            messageDiv.textContent = text;
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
            
            // Store in conversation history
            conversationHistory.push({ role: "user", content: text });
        }
        
        // Function to add a bot message to the chat
        function addBotMessage(text) {
            const chatMessages = document.getElementById("chat-messages");
            const messageDiv = document.createElement("div");
            messageDiv.classList.add("message", "bot-message");
            messageDiv.textContent = text;
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
            
            // Store in conversation history
            conversationHistory.push({ role: "assistant", content: text });
        }
        
        // Function to handle user input
        function handleUserInput() {
            const inputField = document.getElementById("chat-input");
            const userInput = inputField.value.trim();
            
            if (userInput === "") return; // Don't process empty messages
            
            // Add user message to chat
            addUserMessage(userInput);
            
            // Clear input field
            inputField.value = "";
            
            // Queue the message for processing
            messageQueue.push(userInput);
            
            // Process the queue if not already processing a message
            if (!processingMessage) {
                processMessageQueue();
            }
        }
        
        // Function to process the message queue
        async function processMessageQueue() {
            if (messageQueue.length === 0) {
                processingMessage = false;
                return;
            }
            
            processingMessage = true;
            const message = messageQueue.shift();
            
            // Show typing indicator
            document.getElementById("typing-indicator").style.display = "block";
            
            // We simulate GPT response generation here
            // In a real implementation, we would send the message to the GPT API
            await simulateGPTResponse(message);
            
            // Hide typing indicator
            document.getElementById("typing-indicator").style.display = "none";
            
            // Process next message in queue
            setTimeout(() => {
                processMessageQueue();
            }, 500);
        }
        
        // Function to simulate GPT response generation
        async function simulateGPTResponse(message) {
            // Generate a response based on common BioChomps themes
            let response = "";
            
            // Wait time proportional to message length to simulate thinking
            const thinkTime = Math.min(3000, 500 + message.length * 30);
            
            return new Promise(resolve => {
                setTimeout(() => {
                    // In a real implementation, we would call the GPT API here
                    // For now, we generate a themed response based on keywords
                    
                    if (message.toLowerCase().includes("create") || message.toLowerCase().includes("make") || 
                        message.toLowerCase().includes("build") || message.toLowerCase().includes("design")) {
                        response = `Excellent idea, Dr. ${scientistName}! To create a new biological specimen, we'll need to:
1. Extract DNA from a suitable donor organism
2. Splice in genes for the desired traits
3. Incubate in the growth chamber for 3-5 cycles

What primary characteristics would you like your creation to possess?`;
                    } 
                    else if (message.toLowerCase().includes("battle") || message.toLowerCase().includes("fight") || 
                             message.toLowerCase().includes("combat") || message.toLowerCase().includes("versus")) {
                        response = `Initiating battle protocols! Your current champion creature is ready for combat.
                        
Select your opponent difficulty:
- BASIC (recommended for new specimens)
- ADVANCED (for evolved creatures)
- ELITE (only attempt with fully optimized specimens)

Or would you prefer to view the battle logs from previous experiments first?`;
                    }
                    else if (message.toLowerCase().includes("mutate") || message.toLowerCase().includes("evolve") || 
                             message.toLowerCase().includes("enhance") || message.toLowerCase().includes("upgrade")) {
                        response = `Mutation protocols engaged, Dr. ${scientistName}! 

Your specimen can evolve along several pathways:
- STRENGTH enhancement (+15% combat effectiveness, -5% lifespan)
- INTELLIGENCE augmentation (+20% problem solving, -10% regeneration)
- RESILIENCE development (+25% survival rate, -8% reproductive capacity)

Which evolutionary path shall we pursue? The genetic recombination chamber is prepared and awaiting your command.`;
                    }
                    else if (message.toLowerCase().includes("help") || message.toLowerCase().includes("tutorial") || 
                             message.toLowerCase().includes("how") || message.toLowerCase().includes("guide")) {
                        response = `BIOCHOMPS SYSTEM MANUAL - QUICK REFERENCE:

As Head Scientist, you can:
- CREATE new biological specimens using the genetic lab
- EVOLVE existing creatures through mutation chambers
- BATTLE your creations against other specimens
- RESEARCH new genetic components in the biotech library
- EXPLORE abandoned labs for rare genetic material

Use specific commands like "create amphibian" or "battle arena" for optimal results. The fate of biological science rests in your capable hands, Dr. ${scientistName}!`;
                    }
                    else {
                        response = `Fascinating directive, Dr. ${scientistName}. The laboratory computers are processing your request.

Our genetic database suggests several approaches to this matter. Would you like me to:
1. Run a simulation of potential outcomes
2. Prepare the genetic extraction equipment
3. Access the archives for similar experiments
4. Calculate resource requirements for this procedure

Your scientific brilliance continues to impress the entire research community.`;
                    }
                    
                    addBotMessage(response);
                    resolve();
                }, thinkTime);
            });
        }
        
        // Set up event listeners once the page is loaded
        document.addEventListener("DOMContentLoaded", function() {
            // Set up the send button click event
            document.getElementById("send-button").addEventListener("click", handleUserInput);
            
            // Set up enter key press event
            document.getElementById("chat-input").addEventListener("keypress", function(e) {
                if (e.key === "Enter") {
                    handleUserInput();
                }
            });
            
            // Add realistic terminal typing effects
            const terminalElements = document.querySelectorAll(".terminal-content p");
            terminalElements.forEach(element => {
                const originalText = element.textContent;
                element.textContent = "";
                
                let i = 0;
                const typing = setInterval(() => {
                    if (i < originalText.length) {
                        element.textContent += originalText.charAt(i);
                        i++;
                    } else {
                        clearInterval(typing);
                    }
                }, 30);
            });
            
            // Set random flicker effect for some elements
            setInterval(() => {
                const elements = document.querySelectorAll(".flicker");
                elements.forEach(element => {
                    if (Math.random() > 0.99) {
                        element.style.opacity = "0.3";
                        setTimeout(() => {
                            element.style.opacity = "1";
                        }, 100);
                    }
                });
            }, 100);
        });
        
        // Function to implement a real GPT API connection (for future implementation)
        async function connectToGPTAPI(message) {
            // This function would be implemented when connecting to the actual GPT API
            // For now, it's just a placeholder
            
            // In a real implementation, we would:
            // 1. Send the message to a backend server that handles API keys securely
            // 2. The server would call the GPT API with your custom GPT ID
            // 3. Return the response to this function
            
            return "API response would appear here";
        }
    </script>
</body>
</html>